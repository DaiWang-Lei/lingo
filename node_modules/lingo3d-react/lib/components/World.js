import React, { useLayoutEffect, useRef } from "react";
import { container, outline, settings } from "lingo3d";
import index from "lingo3d";
import { preventTreeShake } from "@lincode/utils";
import Setup from "./logical/Setup";
import { useMemoOnce } from "@lincode/hooks";
import scene from "lingo3d/lib/engine/scene";
preventTreeShake(index);
outline.style.display = "none";
settings.autoMout = false;
const World = ({ style, className, position, children, ...rest }) => {
    const divRef = useRef(null);
    useMemoOnce(() => {
        for (const child of [...scene.children])
            child.userData.manager && scene.remove(child);
    });
    useLayoutEffect(() => {
        const el = divRef.current;
        if (!el)
            return;
        el.appendChild(container);
        const resizeObserver = new ResizeObserver(() => {
            settings.resolution = settings.viewportSize = [el.clientWidth, el.clientHeight];
        });
        resizeObserver.observe(el);
        return () => {
            resizeObserver.disconnect();
        };
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement(Setup, { ...rest }),
        React.createElement("div", { ref: divRef, style: {
                width: "100%", height: "100%", position: position !== null && position !== void 0 ? position : "absolute", top: 0, left: 0, ...style
            } }, children)));
};
export default World;

import { useState, useEffect } from "react"
import { store as reactiveStore, SetGlobalState, GetGlobalState } from "@lincode/reactivity"

export type UseGlobalState<T> = () => readonly [T, SetGlobalState<T>]

export const hook = <T>(setGlobalState: SetGlobalState<T>, getGlobalState: GetGlobalState<T>) => {
    const useGlobalState: UseGlobalState<T> = () => {
        const [state, setState] = useState(() => getGlobalState())

        useEffect(() => {
            const handle = getGlobalState(setState)
            
            return () => {
                handle.cancel()
            }
        }, [])

        return <const>[state, setGlobalState]
    }
    return useGlobalState
}

export const store = <T>(data: T) => {
    const [setGlobalState, getGlobalState] = reactiveStore(data)
    const useGlobalState = hook(setGlobalState, getGlobalState)
    return <const>[useGlobalState, setGlobalState, getGlobalState]
}
export default store

export { SetGlobalState, GetGlobalState, assign, merge, omit, filter, rename, renameStartsWith, push, pull, concat, refresh, reset, createEffect, createRef, createPrevious, createMemo } from "@lincode/reactivity"
import { useState, useEffect } from "react";
import { store as reactiveStore } from "@lincode/reactivity";
export const hook = (setGlobalState, getGlobalState) => {
    const useGlobalState = () => {
        const [state, setState] = useState(() => getGlobalState());
        useEffect(() => {
            const handle = getGlobalState(setState);
            return () => {
                handle.cancel();
            };
        }, []);
        return [state, setGlobalState];
    };
    return useGlobalState;
};
export const store = (data) => {
    const [setGlobalState, getGlobalState] = reactiveStore(data);
    const useGlobalState = hook(setGlobalState, getGlobalState);
    return [useGlobalState, setGlobalState, getGlobalState];
};
export default store;
export { assign, merge, omit, filter, rename, renameStartsWith, push, pull, concat, refresh, reset, createEffect, createRef, createPrevious, createMemo } from "@lincode/reactivity";

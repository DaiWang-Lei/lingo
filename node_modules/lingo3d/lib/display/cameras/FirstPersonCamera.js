import CharacterCamera from "../core/CharacterCamera";
import { scaleUp, scaleDown } from "../../engine/constants";
import scene from "../../engine/scene";
import { quaternion, vector3 } from "../utils/reusables";
import { characterCameraDefaults } from "../../interface/ICharacterCamera";
export default class FirstPersonCamera extends CharacterCamera {
    constructor() {
        super();
        const cam = this.camera;
        scene.attach(cam);
        this.then(() => scene.remove(cam));
        this.loop(() => {
            cam.position.copy(this.object3d.getWorldPosition(vector3));
            cam.quaternion.copy(this.object3d.getWorldQuaternion(quaternion));
        });
    }
    get innerY() {
        return this.object3d.position.y * scaleUp;
    }
    set innerY(val) {
        this._innerY = this.object3d.position.y = val * scaleDown;
    }
    get target() {
        return this._target;
    }
    set target(target) {
        target && this._innerY === undefined && (this.innerY = target.height * 0.4);
        super.target = target;
    }
}
FirstPersonCamera.componentName = "firstPersonCamera";
FirstPersonCamera.defaults = characterCameraDefaults;

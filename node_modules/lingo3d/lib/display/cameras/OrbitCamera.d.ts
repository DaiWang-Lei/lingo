import { PerspectiveCamera } from "three";
import EventLoopItem from "../../api/core/EventLoopItem";
import CameraMixin from "../core/mixins/CameraMixin";
import IOrbitCamera from "../../interface/IOrbitCamera";
import ObjectManager from "../core/ObjectManager";
declare class OrbitCamera extends EventLoopItem implements IOrbitCamera {
    protected camera: PerspectiveCamera;
    static componentName: string;
    static defaults: IOrbitCamera;
    outerObject3d: PerspectiveCamera;
    private controls;
    private updateDebounced;
    constructor(camera?: PerspectiveCamera);
    private _targetX?;
    get targetX(): number;
    set targetX(val: number);
    private _targetY?;
    get targetY(): number;
    set targetY(val: number);
    private _targetZ?;
    get targetZ(): number;
    set targetZ(val: number);
    protected _target: ObjectManager | undefined;
    get target(): ObjectManager | undefined;
    set target(target: ObjectManager | undefined);
    append(object: ObjectManager): void;
    get x(): number;
    set x(val: number);
    get y(): number;
    set y(val: number);
    get z(): number;
    set z(val: number);
    get rotationX(): number;
    get rotationY(): number;
    get rotationZ(): number;
    get enableDamping(): boolean;
    set enableDamping(val: boolean);
    get enablePan(): boolean;
    set enablePan(val: boolean);
    private enableZoomState;
    get enableZoom(): boolean;
    set enableZoom(val: boolean);
    private enabledState;
    get enabled(): boolean;
    set enabled(val: boolean);
    get autoRotate(): boolean;
    set autoRotate(val: boolean);
    get autoRotateSpeed(): number;
    set autoRotateSpeed(val: number);
    setRotationY(val: number, lock?: boolean): void;
    setRotationX(val: number, lock?: boolean): void;
    setDistance(val: number, lock?: boolean): void;
}
interface OrbitCamera extends EventLoopItem, CameraMixin<PerspectiveCamera> {
}
export default OrbitCamera;

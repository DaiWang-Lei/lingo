import { Color, Group, RectAreaLight } from "three";
import { RectAreaLightHelper } from "three/examples/jsm/helpers/RectAreaLightHelper";
import { areaLightDefaults } from "../../interface/IAreaLight";
import { lazy } from "@lincode/utils";
import ObjectManager from "../core/ObjectManager";
import { getCamera } from "../../states/useCamera";
import { getLightHelper } from "../../states/useLightHelper";
import mainCamera from "../../engine/mainCamera";
import scene from "../../engine/scene";
import { scaleDown } from "../../engine/constants";
const lazyInit = lazy(async () => {
    const { RectAreaLightUniformsLib } = await import("three/examples/jsm/lights/RectAreaLightUniformsLib.js");
    RectAreaLightUniformsLib.init();
});
export default class default_1 extends ObjectManager {
    constructor() {
        super(new Group());
        (async () => {
            await lazyInit();
            if (this.done)
                return;
            const light = this.light = new RectAreaLight(this._color, this._intensity, this.width * this.scaleX * scaleDown, this.height * this.scaleY * scaleDown);
            this._power && (light.power = this._power);
            this.object3d.add(light);
            this.then(() => light.dispose());
            this.createEffect(() => {
                if (!getLightHelper() || getCamera() !== mainCamera)
                    return;
                const helper = new RectAreaLightHelper(light);
                scene.add(helper);
                return () => {
                    helper.dispose();
                    scene.remove(helper);
                };
            }, [getCamera, getLightHelper]);
        })();
    }
    lookAt(target) {
        super.lookAt(target);
        this.rotationY += 180;
    }
    get color() {
        var _a;
        return (_a = this._color) !== null && _a !== void 0 ? _a : areaLightDefaults.color;
    }
    set color(val) {
        this._color = val;
        this.light && (this.light.color = new Color(val));
    }
    get intensity() {
        var _a;
        return (_a = this._intensity) !== null && _a !== void 0 ? _a : areaLightDefaults.intensity;
    }
    set intensity(val) {
        this._intensity = val;
        this.light && (this.light.intensity = val);
    }
    get power() {
        var _a;
        return (_a = this._power) !== null && _a !== void 0 ? _a : areaLightDefaults.power;
    }
    set power(val) {
        this._power = val;
        this.light && (this.light.power = val);
    }
    get width() {
        var _a;
        return (_a = this._width) !== null && _a !== void 0 ? _a : areaLightDefaults.width;
    }
    set width(val) {
        this._width = val;
        this.light && (this.light.width = val * this.scaleX * scaleDown);
    }
    get height() {
        var _a;
        return (_a = this._height) !== null && _a !== void 0 ? _a : areaLightDefaults.height;
    }
    set height(val) {
        this._height = val;
        this.light && (this.light.height = val * this.scaleY * scaleDown);
    }
    get depth() {
        return areaLightDefaults.depth;
    }
    set depth(val) {
    }
    get scaleX() {
        var _a;
        return (_a = this._scaleX) !== null && _a !== void 0 ? _a : areaLightDefaults.scaleX;
    }
    set scaleX(val) {
        this._scaleX = val;
        this.light && (this.light.width = val * this.width * scaleDown);
    }
    get scaleY() {
        var _a;
        return (_a = this._scaleY) !== null && _a !== void 0 ? _a : areaLightDefaults.scaleY;
    }
    set scaleY(val) {
        this._scaleY = val;
        this.light && (this.light.height = val * this.height * scaleDown);
    }
    get scaleZ() {
        return areaLightDefaults.scaleZ;
    }
    set scaleZ(val) {
    }
}
default_1.componentName = "areaLight";
default_1.defaults = areaLightDefaults;

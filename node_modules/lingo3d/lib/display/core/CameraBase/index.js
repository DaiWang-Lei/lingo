import { Group } from "three";
import ObjectManager from "../ObjectManager";
import { deg2Rad, rad2Deg } from "@lincode/math";
import CameraMixin from "../mixins/CameraMixin";
import { applyMixins } from "@lincode/utils";
import { scaleUp, scaleDown } from "../../../engine/constants";
import { ray, vector3_, vector3, euler } from "../../utils/reusables";
import pillShape from "../SimpleObjectManager/PhysicsItem/cannon/shapes/pillShape";
const PI_2 = Math.PI * 0.5;
class CameraBase extends ObjectManager {
    constructor(camera) {
        super(new Group());
        this._physicsShape = pillShape;
        this._minPolarAngle = 5 * deg2Rad;
        this._maxPolarAngle = 175 * deg2Rad;
        this.camera = camera;
        this.object3d.add(camera);
        this.initCamera();
    }
    getRay() {
        return ray.set(this.camera.getWorldPosition(vector3_), this.camera.getWorldDirection(vector3));
    }
    append(object) {
        this.camera.add(object.outerObject3d);
    }
    get width() {
        return this.object3d.scale.x * scaleUp;
    }
    set width(val) {
        const num = val * scaleDown;
        this.object3d.scale.x = num;
        this.camera.scale.x = 1 / num;
    }
    get height() {
        return this.object3d.scale.y * scaleUp;
    }
    set height(val) {
        const num = val * scaleDown;
        this.object3d.scale.y = num;
        this.camera.scale.y = 1 / num;
    }
    get depth() {
        return this.object3d.scale.z * scaleUp;
    }
    set depth(val) {
        const num = val * scaleDown;
        this.object3d.scale.z = num;
        this.camera.scale.z = 1 / num;
    }
    lookAt(target) {
        super.lookAt(target);
        this.rotationY += 180;
    }
    get minPolarAngle() {
        return this._minPolarAngle * rad2Deg;
    }
    set minPolarAngle(val) {
        this._minPolarAngle = val * deg2Rad;
    }
    get maxPolarAngle() {
        return this._maxPolarAngle * rad2Deg;
    }
    set maxPolarAngle(val) {
        this._maxPolarAngle = val * deg2Rad;
    }
    gyrate(movementX, movementY, inner) {
        const manager = inner ? this.object3d : this.outerObject3d;
        euler.setFromQuaternion(manager.quaternion);
        euler.y -= movementX * 0.002;
        euler.x -= movementY * 0.002;
        euler.x = Math.max(PI_2 - this._maxPolarAngle, Math.min(PI_2 - this._minPolarAngle, euler.x));
        manager.quaternion.setFromEuler(euler);
        !inner && this.physicsRotate();
    }
    get mouseControl() {
        return this._mouseControl;
    }
    set mouseControl(val) {
        var _a;
        if (this._mouseControl === val)
            return;
        this._mouseControl = val;
        (_a = this.mouseControlHandle) === null || _a === void 0 ? void 0 : _a.cancel();
        if (!val)
            return;
        const handle = this.mouseControlHandle = this.cancellable();
        import("./enableMouseControl").then(module => module.default.call(this, handle));
    }
}
applyMixins(CameraBase, [CameraMixin]);
export default CameraBase;

import { Camera, Group } from "three";
import ObjectManager from "../ObjectManager";
import CameraMixin from "../mixins/CameraMixin";
import SimpleObjectManager from "../SimpleObjectManager";
import Point3d from "../../../api/Point3d";
import pillShape from "../SimpleObjectManager/PhysicsItem/cannon/shapes/pillShape";
import ICameraBase, { MouseControl, MouseControlMode } from "../../../interface/ICameraBase";
declare abstract class CameraBase<T extends Camera> extends ObjectManager<Group> implements ICameraBase {
    protected camera: T;
    protected _physicsShape: typeof pillShape;
    constructor(camera: T);
    protected getRay(): import("three").Ray;
    append(object: SimpleObjectManager): void;
    get width(): number;
    set width(val: number);
    get height(): number;
    set height(val: number);
    get depth(): number;
    set depth(val: number);
    lookAt(target: SimpleObjectManager | Point3d): void;
    private _minPolarAngle;
    private _maxPolarAngle;
    get minPolarAngle(): number;
    set minPolarAngle(val: number);
    get maxPolarAngle(): number;
    set maxPolarAngle(val: number);
    gyrate(movementX: number, movementY: number, inner?: boolean): void;
    mouseControlMode?: MouseControlMode;
    private mouseControlHandle;
    private _mouseControl?;
    get mouseControl(): MouseControl | undefined;
    set mouseControl(val: MouseControl | undefined);
}
interface CameraBase<T extends Camera> extends ObjectManager<Group>, CameraMixin<T> {
}
export default CameraBase;

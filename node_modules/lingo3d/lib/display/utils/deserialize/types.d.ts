import { AmbientOcclusion } from "../../../states/useAmbientOcclusion";
import { DefaultLight } from "../../../states/useDefaultLight";
import { PerformanceValue } from "../../../states/usePerformance";
declare const schema: {
    group: import("../../../interface/IGroup").default;
    model: import("../../../interface/IModel").default;
    svgMesh: import("../../../interface/ISvgMesh").default;
    sprite: import("../../../interface/ISprite").default;
    reflector: import("../../../interface/IReflector").default;
    scene: import("../../../interface/IScene").default;
    ambientLight: import("../../../interface/IAmbientLight").default;
    areaLight: import("../../../interface/IAreaLight").default;
    directionalLight: import("../../../interface/IDirectionalLight").default;
    skyLight: import("../../../interface/ISkyLight").default;
    pointLight: import("../../../interface/IPointLight").default;
    spotLight: import("../../../interface/ISpotLight").default;
    camera: import("../../../interface/ICamera").default;
    circle: import("../../../interface/IPrimitive").default;
    cone: import("../../../interface/IPrimitive").default;
    cube: import("../../../interface/IPrimitive").default;
    cylinder: import("../../../interface/IPrimitive").default;
    octahedron: import("../../../interface/IPrimitive").default;
    plane: import("../../../interface/IPrimitive").default;
    sphere: import("../../../interface/IPrimitive").default;
    tetrahedron: import("../../../interface/IPrimitive").default;
    torus: import("../../../interface/IPrimitive").default;
};
export declare type GameObjectType = keyof typeof schema;
export declare type AnimationData = Record<string, //property name
Record<string, //frame number cast as string
number>>;
export declare type AnimationNode = {
    type: "animation";
    uuid: string;
    name: string;
    data: Record<string, //target uuid
    AnimationData>;
};
export declare type SetupNode = {
    type: "setup";
    performance?: PerformanceValue;
    gridHelper?: boolean;
    cameraHelper?: boolean;
    lightHelper?: boolean;
    defaultFog?: boolean;
    defaultLight?: DefaultLight;
    defaultOrbitControls?: boolean;
    logarithmicDepth?: boolean;
    toneMapping?: boolean;
    exposure?: number;
    bloom?: boolean;
    bloomStrength?: number;
    bloomRadius?: number;
    bloomThreshold?: number;
    bokeh?: boolean;
    bokehFocus?: number;
    bokehMaxBlur?: number;
    bokehAperture?: number;
    ambientOcclusion?: AmbientOcclusion;
    texture?: string;
    skybox?: string;
    color?: string;
};
declare type Node = {
    type: GameObjectType;
    uuid: string;
    name?: string;
    children?: Array<BaseSceneGraphNode>;
};
export declare const nonSerializedProperties: readonly ["type", "uuid", "name", "children"];
declare type TypedPropsNode<Props, Type extends GameObjectType> = Partial<Props> & Node & {
    type: Type;
};
export declare type GroupNode = TypedPropsNode<typeof schema.group, "group">;
export declare type ModelNode = TypedPropsNode<typeof schema.model, "model">;
export declare type SvgMeshNode = TypedPropsNode<typeof schema.svgMesh, "svgMesh">;
export declare type SpriteNode = TypedPropsNode<typeof schema.sprite, "sprite">;
export declare type ReflectorNode = TypedPropsNode<typeof schema.reflector, "reflector">;
export declare type SceneNode = TypedPropsNode<typeof schema.scene, "scene">;
export declare type CameraNode = TypedPropsNode<typeof schema.camera, "camera">;
export declare type AmbientLightNode = TypedPropsNode<typeof schema.ambientLight, "ambientLight">;
export declare type AreaLightNode = TypedPropsNode<typeof schema.areaLight, "areaLight">;
export declare type DirectionalLightNode = TypedPropsNode<typeof schema.directionalLight, "directionalLight">;
export declare type SkyLightNode = TypedPropsNode<typeof schema.skyLight, "skyLight">;
export declare type PointLightNode = TypedPropsNode<typeof schema.pointLight, "pointLight">;
export declare type SpotLightNode = TypedPropsNode<typeof schema.spotLight, "spotLight">;
export declare type CircleNode = TypedPropsNode<typeof schema.circle, "circle">;
export declare type ConeNode = TypedPropsNode<typeof schema.cone, "cone">;
export declare type CubeNode = TypedPropsNode<typeof schema.cube, "cube">;
export declare type CylinderNode = TypedPropsNode<typeof schema.cylinder, "cylinder">;
export declare type OctahedronNode = TypedPropsNode<typeof schema.octahedron, "octahedron">;
export declare type PlaneNode = TypedPropsNode<typeof schema.plane, "plane">;
export declare type SphereNode = TypedPropsNode<typeof schema.sphere, "sphere">;
export declare type TetrahedronNode = TypedPropsNode<typeof schema.tetrahedron, "tetrahedron">;
export declare type TorusNode = TypedPropsNode<typeof schema.torus, "torus">;
export declare type BaseSceneGraphNode = GroupNode | ModelNode | SvgMeshNode | SpriteNode | ReflectorNode | SceneNode | CameraNode | AmbientLightNode | AreaLightNode | DirectionalLightNode | SkyLightNode | PointLightNode | SpotLightNode | CircleNode | ConeNode | CubeNode | CylinderNode | OctahedronNode | PlaneNode | SphereNode | TetrahedronNode | TorusNode;
export declare type SceneGraphNode = BaseSceneGraphNode | AnimationNode | SetupNode;
export {};
